//******** AUTO GENERATED FILE, DO NOT EDIT.  *********

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name             String
    email            String
    posts            Post[]
    comments         Comment[]
    likes            Like[]
    messagesSent     Message[]    @relation("MessageSent")
    messagesReceived Message[]    @relation("MessageReceived")
    Event            Event?       @relation(fields: [eventId], references: [id])
    eventId          String?      @db.Uuid
    Order            Order[]
    Review           Review[]
    Submission       Submission[]
    Ticket           Ticket[]
    Course           Course[]
}

model Post {
    id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    title      String
    content    String
    author     User       @relation(fields: [authorId], references: [id])
    authorId   String     @db.Uuid
    comments   Comment[]
    categories Category[]
    tags       Tag[]
    likes      Like[]
}

model Comment {
    id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    text     String
    author   User   @relation(fields: [authorId], references: [id])
    authorId String @db.Uuid
    post     Post   @relation(fields: [postId], references: [id])
    postId   String @db.Uuid
}

model Category {
    id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name  String
    posts Post[]
}

model Tag {
    id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name  String
    posts Post[]
}

model Like {
    id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    user   User   @relation(fields: [userId], references: [id])
    userId String @db.Uuid
    post   Post   @relation(fields: [postId], references: [id])
    postId String @db.Uuid
}

model Message {
    id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    content     String
    sender      User   @relation("MessageSent", fields: [senderId], references: [id])
    senderId    String @db.Uuid
    recipient   User   @relation("MessageReceived", fields: [recipientId], references: [id])
    recipientId String @db.Uuid
}

model Event {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    title     String
    date      DateTime
    location  String
    attendees User[]
}

model Product {
    id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name        String
    price       Float
    description String
    orders      Order[]
    reviews     Review[]
}

model Order {
    id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    customer   User      @relation(fields: [customerId], references: [id])
    customerId String    @db.Uuid
    products   Product[]
}

model Review {
    id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    text      String
    rating    Int
    product   Product @relation(fields: [productId], references: [id])
    productId String  @db.Uuid
    author    User    @relation(fields: [authorId], references: [id])
    authorId  String  @db.Uuid
}

model Recipe {
    id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    title        String
    ingredients  Ingredient[]
    instructions String[]
}

model Ingredient {
    id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name     String
    quantity String
    recipe   Recipe @relation(fields: [recipeId], references: [id])
    recipeId String @db.Uuid
}

model Playlist {
    id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name  String
    songs Song[]
}

model Song {
    id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    title      String
    artist     String
    playlist   Playlist @relation(fields: [playlistId], references: [id])
    playlistId String   @db.Uuid
}

model Course {
    id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    title        String
    instructor   User         @relation(fields: [instructorId], references: [id])
    instructorId String       @db.Uuid
    assignments  Assignment[]
}

model Assignment {
    id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    title       String
    description String
    course      Course       @relation(fields: [courseId], references: [id])
    courseId    String       @db.Uuid
    submissions Submission[]
}

model Submission {
    id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    content      String
    student      User       @relation(fields: [studentId], references: [id])
    studentId    String     @db.Uuid
    assignment   Assignment @relation(fields: [assignmentId], references: [id])
    assignmentId String     @db.Uuid
}

model Ticket {
    id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    title        String
    description  String
    assignedTo   User   @relation(fields: [assignedToId], references: [id])
    assignedToId String @db.Uuid
}
